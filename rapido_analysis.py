# -*- coding: utf-8 -*-
"""Rapido_Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r2InddXebOchlfRocBNvXzl22-y0P-Dd
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/drive/MyDrive/intership/rides_data.csv')
df

df.shape

df.head()

df.tail(2)

df.describe()

df.info()

df.dtypes

# Datatype convertion

df['date']=pd.to_datetime(df['date'])
print(df['date'].dtype)

df['time'] = df.time.apply(lambda x: x.split('.')[0])

# df['time']=pd.to_datetime(df['time'],format='%H:%M:%S')

df.dtypes

"""Missing value handling"""

df.isnull().sum()

df.duplicated().sum()

df.fillna(np.nan,inplace=True)

# categorizing of numerical & object columns

num_col=[]
obj_col=[]
for i in df:
  if df[i].dtype=='int' or df[i].dtype=='float':
    num_col.append(i)
  else:
    obj_col.append(i)
num_col,obj_col

"""Feature Engineering"""

df['Day']=df['date'].dt.day_name()
df['Day']

df['Month']=df['date'].dt.month_name()
df['Month']
df

"""Univariate Analysis"""

df['services'].value_counts()

plt.figure(figsize=(3,4))
plt.bar(x=df['services'].value_counts().index,height=df['services'].value_counts(),color=plt.cm.Pastel1.colors)
plt.xlabel('Services')
plt.ylabel('Count')
plt.xticks(rotation=90)
plt.show()

df['ride_status'].value_counts()

#  visualization of Rides by Status

plt.figure(figsize=(4,3))
plt.bar(x=df['ride_status'].value_counts().index,height=df['ride_status'].value_counts(),color=['lightblue','lightgray'])
plt.title('Ride Status Distribution')
plt.xlabel('Ride Status')
plt.ylabel('Count')
plt.show()

df['payment_method'].value_counts()

plt.figure(figsize=(4,3))
plt.pie(x=df['payment_method'].value_counts(),labels=df['payment_method'].value_counts().index,autopct='%1.2f%%')
plt.show()

df['Day'].value_counts()

plt.figure(figsize=(5,4))
plt.pie(x=df['Day'].value_counts(),labels=df['Day'].value_counts().index,autopct='%1.2f%%')
plt.show()

df['duration'].value_counts()

plt.figure(figsize=(4,3))
sns.boxplot(df['duration'])
plt.show()

sns.histplot(df['duration'], bins=30)
plt.title('Distribution of Ride Duration')
plt.xlabel('Duration (minutes)')
plt.xticks(range(5,130,5),rotation=90)
plt.show()

"""Bivariate Analysis"""

df.groupby('ride_status')['duration'].mean()

# completion rate of rides for each service type
completion_rate=(df[df['ride_status']=='completed'].groupby('services').size() / df.groupby('services').size()) * 100
completion_rate

# average total fare for completed rides by service type
avg_fare_completed=df[df['ride_status']=='completed'].groupby('services')['total_fare'].mean()
avg_fare_completed

# top 5 most common source-destination routes
common_routes = df.groupby(['source', 'destination']).size().nlargest().reset_index()[['source', 'destination']]
common_routes

# average duration per service type.
avg_duration_service=df.groupby('services')['duration'].mean()
avg_duration_service

# pie plot of average duration per service type.
avg_duration_service.plot(kind='pie',figsize=(6,4),autopct="%1.2f%%")
plt.ylabel('')
plt.show()

# Distribution of ride services
plt.figure(figsize=(5, 6))
sns.countplot(data=df, x='services')
plt.title('Distribution of Ride Services')
plt.show()

# most popular payment method  for each service type
popular_payment_by_service=df[df['ride_status']=='completed'].groupby('services')['payment_method'].agg(lambda x:x.value_counts().idxmax())
popular_payment_by_service

payment_method_by_service=df.groupby(['services', 'payment_method']).size().reset_index(name='Count')
payment_method_by_service

palette = sns.color_palette("pastel")
sns.barplot(x='services', y='Count', hue='payment_method', data=payment_method_by_service,palette=palette)
plt.title("Bar Plot of Services vs. Payment Method")
plt.xlabel("Services")
plt.ylabel("Count")
plt.show()

# average ride distance for cancelled vs. completed rides
avg_distance_status=df.groupby('ride_status')['distance'].mean()
avg_distance_status

sns.boxplot(x='services', y='duration', data=df)
plt.title('Ride Duration Distribution by Service Type')
plt.xlabel('Service Type')
plt.ylabel('Ride Duration (minutes)')
plt.xticks(rotation=90)
plt.show()

# top 10 most common destinations
top_destinations=df['destination'].value_counts().nlargest(10)
top_destinations

# bar plot of top 10 most common destinations
top_destinations = df['destination'].value_counts().nlargest(10)
top_destinations.plot(kind='barh')
plt.title('Top 10 Most Common Destinations',pad=10)
plt.xlabel('Destination')
plt.ylabel('Ride Count')
plt.xticks(rotation=90)
plt.show()

# average total fare over time
avg_fare_time = df.groupby('Month')['total_fare'].mean()
avg_fare_time

avg_fare_time.plot(kind='line', marker='o')
plt.title('Average Total Fare Over Time')
plt.xlabel('Month')
plt.ylabel('Average Total Fare')
plt.xticks(rotation=90)
plt.show()

var1=df.corr(numeric_only=True)
sns.heatmap(var1,annot=True,)
plt.show()

# Monthly Ride Count by Status
monthly_ride_counts = df.groupby(['Month', 'ride_status']).size().unstack()
monthly_ride_counts.plot(kind='line', marker='o')
plt.title('Monthly Ride Count by Status')
plt.xlabel('Month')
plt.ylabel('Ride Count')
plt.legend(title='Ride Status')
plt.show()

dict1={}
for col in df:
  if df[col].dtype=='int' or df[col].dtype=='float':
    q1=df[col].quantile(.25)
    q3=df[col].quantile(.75)
    iqr=q3-q1
    min_range=q1-1.5*iqr
    max_range=q3+1.5*iqr
    dict1[col]=(min_range,max_range)
dict1

plt.figure(figsize=(6,4))
# plt.title('Comparison of Duration, Distance, and Total Fare ')
plt.subplot(1, 3, 1)
sns.boxplot(df['duration'])
plt.xlabel('Duration')
plt.ylabel('Duration (minutes) ')
plt.subplot(1, 3, 2)
sns.boxplot(df['distance'])
plt.xlabel('Distance')
plt.ylabel('Distance (km)')
plt.subplot(1, 3, 3)
sns.boxplot(df['total_fare'])
plt.xlabel('Total Fare')
plt.ylabel('Total Fare (â‚¹)')
plt.tight_layout()
plt.show()

# Rides per Month
plt.figure(figsize=(5, 4))
df['Month'].value_counts().sort_index().plot(kind='bar',
  color=[plt.cm.Pastel1.colors[i % len(plt.cm.Pastel1.colors)] for i in range(df['Month'].nunique())])
plt.title('Number of Rides per Month')
plt.xlabel('Month')
plt.ylabel('Number of Rides')
plt.xticks(rotation=0)  # Optional: Minimal rotation for readability.
plt.show()

# Boxplot for 'total_fare by service'
plt.figure(figsize=(8, 7))
sns.boxplot(data=df,x='services', y='total_fare')
plt.title('Distribution of Total Fare by Service Type')
plt.show()

# Boxplot for 'total_fare'
plt.figure(figsize=(8, 7))
sns.boxplot(data=df,x='duration', y='misc_charge')
plt.title('Distribution of duration by misc_charge')
plt.show()

def Distance_category(distance):
  if distance <=10:
    return 'Short'
  elif distance>10 and distance<=35:
    return 'Medium'
  else:
    return 'Long'
df['Distance_category']=df['distance'].apply(func=Distance_category)
df

sns.countplot(x=df['Distance_category'],color='teal')
plt.show()

Day_distance=df.groupby('Day')['distance'].sum()
plt.figure(figsize=(4, 5))
sns.lineplot(x=Day_distance.index,y=Day_distance.values,marker='o')
plt.title('Total Distance by Day')
plt.xlabel('Day')
plt.ylabel('Total Distance')
plt.xticks(rotation=90)
plt.grid(visible=True)
plt.show()